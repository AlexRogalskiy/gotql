{"version":3,"sources":["../../src/modules/runner.js"],"names":["endPoint","query","options","type","got","includes","Error","logger","Logger","log","JSON","stringify","graphQuery","parse","gotPayload","getPayload","headers","body","response","post","prependHttp","toString","handleResponse","error","message","run","require","getHeaders","defaultHeaders","version","Object","assign","getQueryVariables","variables","newVars","varName","value","parsedQuery","operationName","name","json","errors","statusCode","errorStatusCode","statusMessage","module","exports"],"mappings":";;;+BA8EA,WAAoBA,QAApB,EAA8BC,KAA9B,EAAqCC,OAArC,EAA8CC,IAA9C,EAAoDC,GAApD,EAAyD;AACvD,QAAI;AACF,UAAI,CAAC,CAAC,OAAD,EAAU,UAAV,EAAsBC,QAAtB,CAA+BF,IAA/B,CAAL,EAA2C,MAAM,IAAIG,KAAJ,CAAU,iDAAV,CAAN;;AAE3C,YAAMC,SAAS,IAAIC,MAAJ,CAAWN,OAAX,CAAf;;AAEAK,aAAOE,GAAP,CAAY,kBAAiBC,KAAKC,SAAL,CAAeV,KAAf,CAAsB,EAAnD;AACA,YAAMW,aAAaC,MAAMZ,KAAN,EAAaE,IAAb,CAAnB;AACAI,aAAOE,GAAP,CAAY,iBAAgBG,UAAW,EAAvC;;AAEAL,aAAOE,GAAP,CAAW,yBAAX;AACA,YAAMK,aAAaC,WAAWb,QAAQc,OAAnB,EAA4Bf,KAA5B,EAAmCW,UAAnC,CAAnB;AACAL,aAAOE,GAAP,CAAY,mBAAkBC,KAAKC,SAAL,CAAeG,WAAWG,IAA1B,CAAgC,EAA9D;;AAEA,UAAIC,WAAW,MAAMd,IAAIe,IAAJ,CAASC,YAAYpB,QAAZ,CAAT,EAAgCc,UAAhC,CAArB;AACAP,aAAOE,GAAP,CAAY,aAAYS,SAASD,IAAT,CAAcI,QAAd,EAAyB,EAAjD;AACA,aAAOC,eAAeJ,QAAf,EAAyBhB,OAAzB,CAAP;AACD,KAhBD,CAgBE,OAAOqB,KAAP,EAAc;AACd,YAAM,IAAIjB,KAAJ,CAAW,+BAA8BiB,MAAMC,OAAQ,EAAvD,CAAN;AACD;AACF,G;;kBApBcC,G;;;;;;;AA9Ef,MAAMZ,QAAQa,QAAQ,UAAR,CAAd;AACA,MAAMlB,SAASkB,QAAQ,UAAR,CAAf;AACA,MAAMN,cAAcM,QAAQ,cAAR,CAApB;;AAOA,SAASC,UAAT,CAAqBX,OAArB,EAA8B;AAC5B,MAAI,CAACA,OAAL,EAAcA,UAAU,EAAV;AACd,QAAMY,iBAAiB;AACrB,oBAAgB,6CADK;AAErB,kBAAe,SAAQF,QAAQ,oBAAR,EAA8BG,OAAQ,EAFxC;AAGrB,uBAAmB;AAHE,GAAvB;;AAMA,SAAOC,OAAOC,MAAP,CAAc,EAAd,EAAkBf,OAAlB,EAA2BY,cAA3B,CAAP;AACD;;AAOD,SAASI,iBAAT,CAA4BC,SAA5B,EAAuC;AACrC,MAAI,CAACA,SAAL,EAAgB,OAAO,IAAP;AAChB,MAAIC,UAAU,EAAd;AACA,OAAK,IAAIC,OAAT,IAAoBF,SAApB,EAA+B;AAC7BC,YAAQC,OAAR,IAAmBF,UAAUE,OAAV,EAAmBC,KAAtC;AACD;AACD,SAAOF,OAAP;AACD;;AASD,SAASnB,UAAT,CAAqBC,OAArB,EAA8Bf,KAA9B,EAAqCoC,WAArC,EAAkD;AAChD,SAAO;AACLrB,aAASW,WAAWX,OAAX,CADJ;AAELC,UAAM;AACJhB,aAAOoC,WADH;AAEJC,qBAAerC,MAAMsC,IAAN,IAAc,IAFzB;AAGJN,iBAAWD,kBAAkB/B,MAAMgC,SAAxB,KAAsC;AAH7C,KAFD;AAOLO,UAAM;AAPD,GAAP;AASD;;AASD,SAASlB,cAAT,CAAyBJ,QAAzB,EAAmChB,OAAnC,EAA4C;AAC1C,MAAIgB,SAASD,IAAT,CAAcwB,MAAlB,EAA0B;AACxBvB,aAASwB,UAAT,GAAsBxC,QAAQyC,eAAR,IAA2B,GAAjD;AACAzB,aAAS0B,aAAT,GAAyB,eAAzB;AACD;;AAED,SAAOd,OAAOC,MAAP,CAAc,EAAd,EAAkBb,SAASD,IAA3B,EAAiC,EAAEyB,YAAYxB,SAASwB,UAAvB,EAAmClB,SAASN,SAAS0B,aAArD,EAAjC,CAAP;AACD;;AAiCDC,OAAOC,OAAP,GAAiB,EAAErB,GAAF,EAAjB","file":"runner.js","sourcesContent":["const parse = require('./parser')\nconst Logger = require('./logger')\nconst prependHttp = require('prepend-http')\n\n/**\n * Extract the custom header object and mounts it together with the default objects\n *\n * @param {Object.<string, string>} headers Custom header Object\n */\nfunction getHeaders (headers) {\n  if (!headers) headers = {}\n  const defaultHeaders = {\n    'X-Powered-By': 'GotQL - The serverside GraphQL query engine',\n    'User-Agent': `GotQL ${require('../../package.json').version}`,\n    'Accept-Encoding': 'gzip, deflate'\n  }\n\n  return Object.assign({}, headers, defaultHeaders)\n}\n\n/**\n * Extract variables from the JSON-like query\n *\n * @param {Object.<string, { type: string, value: string }>} variables Variable object\n */\nfunction getQueryVariables (variables) {\n  if (!variables) return null\n  let newVars = {}\n  for (let varName in variables) {\n    newVars[varName] = variables[varName].value\n  }\n  return newVars\n}\n\n/**\n * Creates the Got body object to be sent to the GraphQL endpoint\n *\n * @param {Object.<string, string>} headers Custom header list\n * @param {queryType} query JSON-like query type\n * @param {string} parsedQuery String-parsed query\n */\nfunction getPayload (headers, query, parsedQuery) {\n  return {\n    headers: getHeaders(headers),\n    body: {\n      query: parsedQuery,\n      operationName: query.name || null,\n      variables: getQueryVariables(query.variables) || null\n    },\n    json: true\n  }\n}\n\n/**\n * Handles Got response object\n *\n * Treats GraphQL errors and messages\n * @param {object} response Got response\n * @param {userOpts} options User options\n */\nfunction handleResponse (response, options) {\n  if (response.body.errors) {\n    response.statusCode = options.errorStatusCode || 500\n    response.statusMessage = 'GraphQL Error'\n  }\n\n  return Object.assign({}, response.body, { statusCode: response.statusCode, message: response.statusMessage })\n}\n\n/**\n *\n * @param {string} endPoint GraphQL endpoint to query on\n * @param {queryType} query A JSON-like query type\n * @param {userOpts} [options] User options\n * @param {string} type Can be 'query' or 'mutation'\n * @param {any} got The Got object as an injected dependency (for test modularity)\n * @return {{data: object, statusCode: number, message: string}} Got handled response\n */\nasync function run (endPoint, query, options, type, got) {\n  try {\n    if (!['query', 'mutation'].includes(type)) throw new Error('Query type must be either `query` or `mutation`')\n\n    const logger = new Logger(options) // Instantiate logger to log messages\n\n    logger.log(`Parsing query: ${JSON.stringify(query)}`)\n    const graphQuery = parse(query, type) // Parses JSON into GraphQL Query\n    logger.log(`Parsed query: ${graphQuery}`)\n\n    logger.log('Building payload object')\n    const gotPayload = getPayload(options.headers, query, graphQuery)\n    logger.log(`Payload object: ${JSON.stringify(gotPayload.body)}`)\n\n    let response = await got.post(prependHttp(endPoint), gotPayload)\n    logger.log(`Response: ${response.body.toString()}`)\n    return handleResponse(response, options)\n  } catch (error) {\n    throw new Error(`Error when executing query: ${error.message}`)\n  }\n}\n\nmodule.exports = { run }\n"]}