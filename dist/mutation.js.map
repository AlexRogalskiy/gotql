{"version":3,"sources":["../src/mutation.js"],"names":["Logger","require","runner","mutation","endPoint","query","options","logger","log","run","module","exports"],"mappings":";;AAAA,MAAMA,SAASC,QAAQ,kBAAR,CAAf;AACA,MAAMC,SAASD,QAAQ,kBAAR,CAAf;;AAsCA,SAASE,QAAT,CAAmBC,QAAnB,EAA6BC,KAA7B,EAAoCC,OAApC,EAA6C;AAC3C,QAAMC,SAAS,IAAIP,MAAJ,CAAWM,OAAX,CAAf;AACAC,SAAOC,GAAP,CAAW,yBAAX;AACA,SAAON,OAAOO,GAAP,CAAWL,QAAX,EAAqBC,KAArB,EAA4BC,OAA5B,EAAqC,UAArC,EAAiDL,QAAQ,KAAR,CAAjD,CAAP;AACD;;AAEDS,OAAOC,OAAP,GAAiBR,QAAjB","file":"mutation.js","sourcesContent":["const Logger = require('./modules/logger')\nconst runner = require('./modules/runner')\n\n/**\n * @typedef {Object.<string, string>} headerObj\n */\n/**\n * @typedef {object} userOpts User Options\n * @prop {boolean} debug Sets debug mode on/off\n * @prop {number} errorStatusCode Default error code to send back to the user on error (defaults to 500)\n * @prop {headerObj} headers Custom headers to be sent along\n */\n/**\n * @typedef {object} fieldObj Field properties\n * @prop {Array<string | Object.<string, [fieldObj]>>} [fields] Nested fields\n */\n/**\n * @typedef {object} operation An operation object\n * @prop {string} name Operation name\n * @prop {Object.<string, any>} [args] Operation arguments\n * @prop {string} [alias] Operation arguments\n * @prop {Array<string | Object.<string, [fieldObj]>>} fields Field list\n */\n/**\n * @typedef {object} queryType An getQL JSON query type\n * @prop {string} [name] Query name (it is needed when there are multiple queries)\n * @prop {operation} operation Operation object\n * @prop {Object.<string, { type: string, value: string }>} [variables] Query variables\n */\n\n/**\n * Performs a mutation on the specified GraphQL endpoint\n *\n * @param {string} endPoint GraphQL Endpoint\n * @param {queryType} query The JSON getQL query object\n * @param {userOpts} [options] User options\n * @public\n * @return {Promise<any>} A response object containing all the data\n */\nfunction mutation (endPoint, query, options) {\n  const logger = new Logger(options)\n  logger.log('Starting a new mutation')\n  return runner.run(endPoint, query, options, 'mutation', require('got'))\n}\n\nmodule.exports = mutation\n"]}